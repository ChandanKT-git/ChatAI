{
  "name": "AI Chatbot Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ai-chatbot-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.headers.authorization }}",
              "operation": "exists"
            }
          ]
        }
      },
      "id": "validate-auth",
      "name": "Validate Auth",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://hledgkxkscluffuwrsxw.graphql.ap-south-1.nhost.run/v1/graphql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "={{ $json.headers.authorization }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query GetChatUser($chatId: uuid!) { chats_by_pk(id: $chatId) { user_id } }"
            },
            {
              "name": "variables",
              "value": "{\"chatId\": \"{{ $json.body.chat_id }}\"}"
            }
          ]
        },
        "options": {}
      },
      "id": "get-chat-user",
      "name": "Get Chat User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "nhost-auth",
          "name": "Nhost Auth"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.data.chats_by_pk.user_id }}",
              "value2": "={{ $json.headers['x-hasura-user-id'] }}",
              "operation": "equal"
            }
          ]
        }
      },
      "id": "validate-ownership",
      "name": "Validate Ownership",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.OPENROUTER_API_KEY }}"
            },
            {
              "name": "HTTP-Referer",
              "value": "https://ai-chatbot.netlify.app"
            },
            {
              "name": "X-Title",
              "value": "AI Chatbot"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "openai/gpt-3.5-turbo"
            },
            {
              "name": "messages",
              "value": "[{\"role\": \"user\", \"content\": \"{{ $json.body.message }}\"}]"
            },
            {
              "name": "max_tokens",
              "value": "1000"
            },
            {
              "name": "temperature",
              "value": "0.7"
            }
          ]
        },
        "options": {}
      },
      "id": "call-openrouter",
      "name": "Call OpenRouter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "openrouter-auth",
          "name": "OpenRouter Auth"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://hledgkxkscluffuwrsxw.graphql.ap-south-1.nhost.run/v1/graphql",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "={{ $json.headers.authorization }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "mutation InsertMessage($chatId: uuid!, $content: String!, $role: String!) { insert_messages_one(object: { chat_id: $chatId, content: $content, role: $role }) { id } }"
            },
            {
              "name": "variables",
              "value": "{\"chatId\": \"{{ $json.body.chat_id }}\", \"content\": \"{{ $('Call OpenRouter').item.json.choices[0].message.content }}\", \"role\": \"assistant\"}"
            }
          ]
        },
        "options": {}
      },
      "id": "save-ai-response",
      "name": "Save AI Response",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "nhost-auth",
          "name": "Nhost Auth"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": true, \"response\": \"{{ $('Call OpenRouter').item.json.choices[0].message.content }}\"}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"error\": \"Unauthorized\"}"
      },
      "id": "unauthorized-response",
      "name": "Unauthorized Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\"success\": false, \"error\": \"Chat ownership validation failed\"}"
      },
      "id": "ownership-error-response",
      "name": "Ownership Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 400]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Auth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Auth": {
      "main": [
        [
          {
            "node": "Get Chat User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Unauthorized Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Chat User": {
      "main": [
        [
          {
            "node": "Validate Ownership",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Ownership": {
      "main": [
        [
          {
            "node": "Call OpenRouter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ownership Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenRouter": {
      "main": [
        [
          {
            "node": "Save AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save AI Response": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
